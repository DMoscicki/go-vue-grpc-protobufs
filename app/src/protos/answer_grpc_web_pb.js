/**
 * @fileoverview gRPC-Web generated client stub for protofiles
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v4.23.4
// source: answer.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.protofiles = require('./answer_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.protofiles.todoServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.protofiles.todoServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protofiles.AddTodos,
 *   !proto.protofiles.TodoObject>}
 */
const methodDescriptor_todoService_addTodo = new grpc.web.MethodDescriptor(
  '/protofiles.todoService/addTodo',
  grpc.web.MethodType.UNARY,
  proto.protofiles.AddTodos,
  proto.protofiles.TodoObject,
  /**
   * @param {!proto.protofiles.AddTodos} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protofiles.TodoObject.deserializeBinary
);


/**
 * @param {!proto.protofiles.AddTodos} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protofiles.TodoObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protofiles.TodoObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protofiles.todoServiceClient.prototype.addTodo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protofiles.todoService/addTodo',
      request,
      metadata || {},
      methodDescriptor_todoService_addTodo,
      callback);
};


/**
 * @param {!proto.protofiles.AddTodos} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protofiles.TodoObject>}
 *     Promise that resolves to the response
 */
proto.protofiles.todoServicePromiseClient.prototype.addTodo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protofiles.todoService/addTodo',
      request,
      metadata || {},
      methodDescriptor_todoService_addTodo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protofiles.DeleteTodos,
 *   !proto.protofiles.deleteResponse>}
 */
const methodDescriptor_todoService_deleteTodo = new grpc.web.MethodDescriptor(
  '/protofiles.todoService/deleteTodo',
  grpc.web.MethodType.UNARY,
  proto.protofiles.DeleteTodos,
  proto.protofiles.deleteResponse,
  /**
   * @param {!proto.protofiles.DeleteTodos} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protofiles.deleteResponse.deserializeBinary
);


/**
 * @param {!proto.protofiles.DeleteTodos} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protofiles.deleteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protofiles.deleteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protofiles.todoServiceClient.prototype.deleteTodo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protofiles.todoService/deleteTodo',
      request,
      metadata || {},
      methodDescriptor_todoService_deleteTodo,
      callback);
};


/**
 * @param {!proto.protofiles.DeleteTodos} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protofiles.deleteResponse>}
 *     Promise that resolves to the response
 */
proto.protofiles.todoServicePromiseClient.prototype.deleteTodo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protofiles.todoService/deleteTodo',
      request,
      metadata || {},
      methodDescriptor_todoService_deleteTodo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protofiles.GetTodos,
 *   !proto.protofiles.todoResponse>}
 */
const methodDescriptor_todoService_getTodos = new grpc.web.MethodDescriptor(
  '/protofiles.todoService/getTodos',
  grpc.web.MethodType.UNARY,
  proto.protofiles.GetTodos,
  proto.protofiles.todoResponse,
  /**
   * @param {!proto.protofiles.GetTodos} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protofiles.todoResponse.deserializeBinary
);


/**
 * @param {!proto.protofiles.GetTodos} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protofiles.todoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protofiles.todoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protofiles.todoServiceClient.prototype.getTodos =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protofiles.todoService/getTodos',
      request,
      metadata || {},
      methodDescriptor_todoService_getTodos,
      callback);
};


/**
 * @param {!proto.protofiles.GetTodos} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protofiles.todoResponse>}
 *     Promise that resolves to the response
 */
proto.protofiles.todoServicePromiseClient.prototype.getTodos =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protofiles.todoService/getTodos',
      request,
      metadata || {},
      methodDescriptor_todoService_getTodos);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protofiles.Language,
 *   !proto.protofiles.LanguageResponse>}
 */
const methodDescriptor_todoService_libResponse = new grpc.web.MethodDescriptor(
  '/protofiles.todoService/libResponse',
  grpc.web.MethodType.UNARY,
  proto.protofiles.Language,
  proto.protofiles.LanguageResponse,
  /**
   * @param {!proto.protofiles.Language} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protofiles.LanguageResponse.deserializeBinary
);


/**
 * @param {!proto.protofiles.Language} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protofiles.LanguageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protofiles.LanguageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protofiles.todoServiceClient.prototype.libResponse =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protofiles.todoService/libResponse',
      request,
      metadata || {},
      methodDescriptor_todoService_libResponse,
      callback);
};


/**
 * @param {!proto.protofiles.Language} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protofiles.LanguageResponse>}
 *     Promise that resolves to the response
 */
proto.protofiles.todoServicePromiseClient.prototype.libResponse =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protofiles.todoService/libResponse',
      request,
      metadata || {},
      methodDescriptor_todoService_libResponse);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protofiles.GetRepos,
 *   !proto.protofiles.LanguageResponse>}
 */
const methodDescriptor_todoService_getRepos = new grpc.web.MethodDescriptor(
  '/protofiles.todoService/getRepos',
  grpc.web.MethodType.UNARY,
  proto.protofiles.GetRepos,
  proto.protofiles.LanguageResponse,
  /**
   * @param {!proto.protofiles.GetRepos} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protofiles.LanguageResponse.deserializeBinary
);


/**
 * @param {!proto.protofiles.GetRepos} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protofiles.LanguageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protofiles.LanguageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protofiles.todoServiceClient.prototype.getRepos =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protofiles.todoService/getRepos',
      request,
      metadata || {},
      methodDescriptor_todoService_getRepos,
      callback);
};


/**
 * @param {!proto.protofiles.GetRepos} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protofiles.LanguageResponse>}
 *     Promise that resolves to the response
 */
proto.protofiles.todoServicePromiseClient.prototype.getRepos =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protofiles.todoService/getRepos',
      request,
      metadata || {},
      methodDescriptor_todoService_getRepos);
};


module.exports = proto.protofiles;

